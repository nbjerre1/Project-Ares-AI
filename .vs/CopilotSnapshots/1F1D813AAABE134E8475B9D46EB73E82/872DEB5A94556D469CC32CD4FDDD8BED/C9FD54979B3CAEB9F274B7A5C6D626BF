using Godot;
using System;
using System.Net.Sockets;
using System.Net;
using System.Text.Json;
using System.Text;
using System.Threading;
using System.Collections.Generic;
using System.IO;

public partial class SocketServer : Node
{
    private TcpListener listener;
    private bool running = false;

    public static Dictionary<int, string> LatestActions = new()
    {
        { 1, "idle" }
    };

    // Thread communication fields
    private string _pendingStateJson = null;
    private readonly object _stateLock = new();
    private AutoResetEvent _stateReadyEvent = new(false);
    private string _lastAction = null;

    public override void _Ready()
    {
        StartServer();
        GetTree().SceneChanged += OnSceneChanged;
    }

    public override void _Notification(int what)
    {
        // NotificationWmQuitRequest: the user is quitting the application
        // NotificationPredelete: the node is about to be freed
        if (what == NotificationWmQuitRequest || what == NotificationPredelete)
        {
            StopServer();
        }
    }

    private void OnSceneChanged(Node newScene)
    {
        StopServer();
    }

    public void StartServer()
    {
        try
        {
            // Set SO_REUSEADDR before binding
            listener = new TcpListener(IPAddress.Loopback, 12345);
            listener.Server.SetSocketOption(SocketOptionLevel.Socket, SocketOptionName.ReuseAddress, true);
            listener.Start();
            running = true;
            GD.Print("Socket server started on port 12345");
            AcceptClientsAsync();
        }
        catch (SocketException ex)
        {
            GD.PrintErr($"Socket server error: {ex}");
        }
    }

    public void StopServer()
    {
        if (listener != null)
        {
            try
            {
                running = false;
                listener.Stop();
                listener = null;
                GD.Print("Socket server stopped.");
            }
            catch (Exception ex)
            {
                GD.PrintErr($"Error stopping socket server: {ex}");
            }
        }
    }

    private async void AcceptClientsAsync()
    {
        while (running)
        {
            try
            {
                var client = await listener.AcceptTcpClientAsync();
                // ...handle client...
            }
            catch (ObjectDisposedException)
            {
                // Listener was stopped, exit loop
                break;
            }
            catch (Exception ex)
            {
                GD.PrintErr($"Socket accept error: {ex}");
            }
        }
    }

    private void PrepareAndSendState()
    {
        var mobStates = new List<Dictionary<string, object>>();
        foreach (var mobNode in GetTree().GetNodesInGroup("mobs"))
        {
            if (mobNode is Mushroom m)
                mobStates.Add(m.GetState());
        }
        Player player = GetTree().Root.FindChild("Player", true, false) as Player;
        if (player != null)
        {
            var state = new
            {
                x = player.GlobalPosition.X,
                y = player.GlobalPosition.Y,
                health = player.Health,
                timer = StopwatchLabel.GameTime,
                mobs = mobStates
            };
            string json = JsonSerializer.Serialize(state) + "\n";
            lock (_stateLock)
            {
                _pendingStateJson = json;
            }
        }
        else
        {
            lock (_stateLock)
            {
                _pendingStateJson = null;
            }
        }
        _stateReadyEvent.Set();
    }

    private void SetLatestAction()
    {
        Player player = GetTree().Root.FindChild("Player", true, false) as Player;
        if (player != null && _lastAction != null)
        {
            LatestActions[player.PlayerId] = _lastAction;
        }
    }
}
