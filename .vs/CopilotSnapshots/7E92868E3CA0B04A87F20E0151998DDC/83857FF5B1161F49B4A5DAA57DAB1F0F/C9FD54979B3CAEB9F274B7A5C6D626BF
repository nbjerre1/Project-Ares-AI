using Godot;
using System;
using System.Net.Sockets;
using System.Net;
using System.Text.Json;
using System.Text;
using System.Threading;
using System.Collections.Generic;
using System.IO;

public partial class SocketServer : Node
{
    // Only define NotificationWmQuitRequest, use GodotObject.NotificationPredelete for predelete
    private const int NotificationWmQuitRequest = 22;

    private TcpListener listener;
    private bool running = false;

    public static Dictionary<int, string> LatestActions = new()
    {
        { 1, "idle" }
    };

    // Thread communication fields
    private string _pendingStateJson = null;
    private readonly object _stateLock = new();
    private AutoResetEvent _stateReadyEvent = new(false);
    private string _lastAction = null;

    // Add a thread-safe queue for state requests/results
    private Queue<Action> _mainThreadActions = new();
    private string _mobStatesJson = null;

    // When writing to the socket, ensure you use UTF8Encoding without BOM:
    private static readonly Encoding Utf8NoBom = new UTF8Encoding(false);

    public override void _Ready()
    {
        StartServer();
    }

    public override void _Notification(int what)
    {
        // Use GodotObject.NotificationPredelete to avoid hiding inherited member
        if (what == NotificationWmQuitRequest || what == GodotObject.NotificationPredelete)
        {
            StopServer();
        }
    }

    public override void _Process(double delta)
    {
        // Execute any queued actions that need to run on the main thread
        lock (_mainThreadActions)
        {
            while (_mainThreadActions.Count > 0)
            {
                var action = _mainThreadActions.Dequeue();
                action();
            }
        }
    }

    public void StartServer()
    {
        try
        {
            // Set SO_REUSEADDR before binding
            listener = new TcpListener(IPAddress.Loopback, 12345);
            listener.Server.SetSocketOption(SocketOptionLevel.Socket, SocketOptionName.ReuseAddress, true);
            listener.Start();
            running = true;
            GD.Print("Socket server started on port 12345");
            AcceptClientsAsync();
        }
        catch (SocketException ex)
        {
            GD.PrintErr($"Socket server error: {ex}");
        }
    }

    public void StopServer()
    {
        if (listener != null)
        {
            try
            {
                running = false;
                listener.Stop();
                listener = null;
                GD.Print("Socket server stopped.");
            }
            catch (Exception ex)
            {
                GD.PrintErr($"Error stopping socket server: {ex}");
            }
        }
    }

    private async void AcceptClientsAsync()
    {
        while (running)
        {
            try
            {
                var client = await listener.AcceptTcpClientAsync();
                // Start a new thread/task to handle this client
                _ = System.Threading.Tasks.Task.Run(() => HandleClient(client));
            }
            catch (ObjectDisposedException)
            {
                // Listener was stopped, exit loop
                break;
            }
            catch (SocketException ex)
            {
                // 995 = ERROR_OPERATION_ABORTED, expected when stopping the server
                if (ex.ErrorCode == 995 && !running)
                {
                    // Suppress logging for expected shutdown
                    break;
                }
                // Only log unexpected socket errors
                GD.PrintErr($"Socket accept error: {ex}");
            }
            catch (Exception ex)
            {
                GD.PrintErr($"Socket accept error: {ex}");
            }
        }
    }

    private void HandleClient(TcpClient client)
    {
        try
        {
            using (client)
            using (var stream = client.GetStream())
            using (var reader = new StreamReader(stream, Encoding.UTF8))
            using (var writer = new StreamWriter(stream, Utf8NoBom) { AutoFlush = true })
            {
                while (running && client.Connected)
                {
                    // Prepare and send the latest state
                    PrepareAndSendState();

                    // Wait for state to be ready
                    _stateReadyEvent.WaitOne();

                    string stateJson;
                    lock (_stateLock)
                    {
                        stateJson = _pendingStateJson;
                    }

                    if (string.IsNullOrEmpty(stateJson))
                        break;

                    writer.Write(stateJson);

                    // Wait for action from client
                    string actionLine = reader.ReadLine();
                    if (string.IsNullOrEmpty(actionLine))
                        break;

                    _lastAction = actionLine.Trim();
                    SetLatestAction();
                }
            }
        }
        catch (IOException)
        {
            // Client disconnected, ignore
        }
        catch (Exception ex)
        {
            GD.PrintErr($"Socket client handler error: {ex}");
        }
    }

    private void PrepareAndSendState()
    {
        // Instead of accessing Godot nodes from a background thread,
        // queue the state collection to the main thread and wait for the result.
        var stateReady = new AutoResetEvent(false);

        lock (_mainThreadActions)
        {
            _mainThreadActions.Enqueue(() =>
            {
                var mobStates = new List<Dictionary<string, object>>();
                foreach (var mobNode in GetTree().GetNodesInGroup("mobs"))
                {
                    if (mobNode is Mushroom m)
                        mobStates.Add(m.GetState());
                }
                Player player = GetTree().Root.FindChild("Player", true, false) as Player;
                if (player != null)
                {
                    var state = new
                    {
                        x = player.GlobalPosition.X,
                        y = player.GlobalPosition.Y,
                        health = player.Health,
                        timer = StopwatchLabel.GameTime,
                        mobs = mobStates
                    };
                    _mobStatesJson = JsonSerializer.Serialize(state) + "\n";
                }
                else
                {
                    _mobStatesJson = null;
                }
                stateReady.Set();
            });
        }

        // Wait for the main thread to process the action
        stateReady.WaitOne();

        lock (_stateLock)
        {
            _pendingStateJson = _mobStatesJson;
        }
        _stateReadyEvent.Set();
    }

    private void SetLatestAction()
    {
        Player player = GetTree().Root.FindChild("Player", true, false) as Player;
        if (player != null && _lastAction != null)
        {
            LatestActions[player.PlayerId] = _lastAction;
        }
    }
}
